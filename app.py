from flask import Flask, render_template, request, jsonify
import os
import requests
import datetime

# Access the API key from the environment variable
API_KEY = os.environ.get('API_KEY')
app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/search', methods=['GET', 'POST'])
def search():
    search_queries = request.form.getlist('search_query')
    print(search_queries)
    search_queries = search_queries[0].split('\r\n')
    print(search_queries)
    results = []

    # Call API for each search query
    for query in search_queries:
        result = call_api(query)
        results.append(result)

    return jsonify(results=results)

@app.route('/rules', methods=['GET', 'POST'])
def rules():
    search_author = request.form.get('search_author')
    search_creation_date = request.form.get('search_creation_date')

    filter_parts = []

    if search_author:
        filter_parts.append(f'author:{search_author}')

    if search_creation_date:
        filter_parts.append(f'creation_date:{search_creation_date}')

    filter_string = ' '.join(filter_parts)

    #,creation_date:{search_creation_date}
    url = f'https://www.virustotal.com/api/v3/yara_rules?filter={filter_string}'
    headers = {"accept": "application/json", 'X-Apikey': API_KEY}
    response = requests.get(url, headers=headers)

    print(response.json())

    return jsonify(response.json())

def call_api(query):
    # Replace this with your actual API call
    # For demonstration purposes, let's assume we're calling an API that returns dummy data
    url = f'https://www.virustotal.com/api/v3/search?query={query}'
    headers = {"accept": "application/json", 'X-Apikey': API_KEY}
    response = requests.get(url, headers=headers)

    ip_address = 'NA'
    reputation = 'NA'
    analysis_date = 'NA'
    threat_level = 'NA'

    if response.status_code == 200:
        data = response.json()
        # Extracting relevant information from the API response
        if 'data' in data and data['data']:
            ip_address = data['data'][0]['id']
            reputation = data['data'][0]['attributes']['reputation']
            analysis_date = data['data'][0]['attributes']['last_analysis_date']
            threat_level = data['data'][0]['attributes']['threat_severity']['threat_severity_level']

            dt_object = datetime.datetime.utcfromtimestamp(int(analysis_date))
            analysis_date = dt_object.strftime('%Y-%m-%d %H:%M:%S')

    return {
        'ip_address': ip_address,
        'reputation': reputation,
        'analysis_date': analysis_date,
        'threat_level': threat_level
    }


if __name__ == '__main__':
    app.run(debug=True)
