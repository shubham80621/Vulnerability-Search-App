from flask import Flask, render_template, request, jsonify
import os
import requests
import datetime
import time
cached_tokens = {}


# Access the API key from the environment variable
API_KEY = os.environ.get('API_KEY')
CLIENT_ID = os.environ.get('CLIENT_ID')
CLIENT_SECRET = os.environ.get('CLIENT_SECRET')
app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/search', methods=['GET', 'POST'])
def search():
    search_queries = request.form.getlist('search_query')
    print(search_queries)
    search_queries = search_queries[0].split('\r\n')
    print(search_queries)
    results = []

    # Call API for each search query
    for query in search_queries:
        result = call_api(query)
        results.append(result)

    return jsonify(results=results)

@app.route('/rules', methods=['GET', 'POST'])
def rules():
    search_author = request.form.get('search_author')
    search_creation_date = request.form.get('search_creation_date')

    filter_parts = []

    if search_author:
        filter_parts.append(f'author:{search_author}')

    if search_creation_date:
        filter_parts.append(f'creation_date:{search_creation_date}')

    filter_string = ' '.join(filter_parts)

    #,creation_date:{search_creation_date}
    url = f'https://www.virustotal.com/api/v3/yara_rules?filter={filter_string}'
    headers = {"accept": "application/json", 'X-Apikey': API_KEY}
    response = requests.get(url, headers=headers)

    print(response.json())

    return jsonify(response.json())

@app.route('/crowdStrikeSearch', methods=['GET', 'POST'])
def crowdStrikeSearch():
    search_queries = request.form.getlist('search_query')
    search_queries = search_queries[0].split('\r\n')
    results = []

    authToken = getAuthToken()

    if(authToken):
        for query in search_queries:
            result = call_crowd_strike_api(query, authToken)
            results.append(result)
    else:
        print('No token found')

    return jsonify(results=results)

def getAuthToken():
    global cached_tokens
    if 'token' in cached_tokens and 'expiration_time' in cached_tokens:
        if time.time() < cached_tokens['expiration_time']:
            return cached_tokens['token']
    
    url = 'https://api.crowdstrike.com/oauth2/token'
    
    payload = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
    }
    
    try:
        response = requests.post(url, data=payload)
        response.raise_for_status()  
        access_token = response.json().get('access_token')
        
        expiration_time = time.time() + (29 * 60)
        cached_tokens = {'token': access_token, 'expiration_time': expiration_time}
        return access_token
    except requests.exceptions.RequestException as e:
        print('Error:', e)
        return None


def call_api(query):
    # Replace this with your actual API call
    # For demonstration purposes, let's assume we're calling an API that returns dummy data
    url = f'https://www.virustotal.com/api/v3/search?query={query}'
    headers = {"accept": "application/json", 'X-Apikey': API_KEY}
    response = requests.get(url, headers=headers)

    ip_address = 'NA'
    reputation = 'NA'
    analysis_date = 'NA'
    threat_level = 'NA'

    if response.status_code == 200:
        data = response.json()
        # Extracting relevant information from the API response
        if 'data' in data and data['data']:
            try:
                ip_address = data['data'][0]['id']
            except:
                pass
            try:    
                reputation = data['data'][0]['attributes']['reputation']
            except:
                pass
            try:
                analysis_date = data['data'][0]['attributes']['last_analysis_date']
                dt_object = datetime.datetime.utcfromtimestamp(int(analysis_date))
                analysis_date = dt_object.strftime('%Y-%m-%d %H:%M:%S')
            except:
                pass 
            try:   
                threat_level = data['data'][0]['attributes']['threat_severity']['threat_severity_level']
            except:
                pass
            

    return {
        'ip_address': ip_address,
        'reputation': reputation,
        'analysis_date': analysis_date,
        'threat_level': threat_level
    }


def call_crowd_strike_api(query, auth):
    url = f'https://api.crowdstrike.com/intel/combined/indicators/v1?filter=indicator:"{query}"'
    headers = {"accept": "application/json", "Authorization": f"bearer {auth}"}
    response = requests.get(url, headers=headers)
   
    formattedResponse = {}

    if response.status_code == 200:
        data = response.json()
        if 'resources' in data and data['resources']:
           
            fields = ['id','indicator','domain_types','ip_address_types','actors','malicious_confidence','published_date','kill_chains','targets','threat_types','vulnerabilities']
            
            for field in fields:
                try:
                    formattedResponse[field] = data['resources'][0][field]
                    if(field=='published_date'):
                        formattedResponse[field] = datetime.datetime.utcfromtimestamp(int(formattedResponse[field]))
                        formattedResponse[field] = formattedResponse[field].strftime('%Y-%m-%d %H:%M:%S')
                except:
                    formattedResponse[field] = 'NA'
    
    return formattedResponse


if __name__ == '__main__':
    app.run(debug=True)
